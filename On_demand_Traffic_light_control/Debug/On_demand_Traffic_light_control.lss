
On_demand_Traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008c2  00000956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  0000095a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000156b  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000918  00000000  00000000  000020b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ece  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  0000389c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000896  00000000  00000000  00003cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d7  00000000  00000000  00004542  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_1>
   8:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_2>
   c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 32 04 	jmp	0x864	; 0x864 <__vector_10>
  2c:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  8a:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_ISRfun>:
static STATES Prevus_TraficState;

static void TIMER_ISRfun(void* x)
{
	
	APP_u16TimeCounter--;
  92:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <APP_u16TimeCounter>
  96:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <APP_u16TimeCounter+0x1>
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <APP_u16TimeCounter+0x1>
  a0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <APP_u16TimeCounter>
	if(!APP_u16TimeCounter)
  a4:	89 2b       	or	r24, r25
  a6:	69 f5       	brne	.+90     	; 0x102 <TIMER_ISRfun+0x70>
	{
		TCNT0 = TCNT_PRELOAD;
  a8:	87 ef       	ldi	r24, 0xF7	; 247
  aa:	82 bf       	out	0x32, r24	; 50
		Five_secondFLAG--;
  ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Five_secondFLAG>
  b0:	81 50       	subi	r24, 0x01	; 1
  b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Five_secondFLAG>
		if(!Five_secondFLAG)
  b6:	81 11       	cpse	r24, r1
  b8:	17 c0       	rjmp	.+46     	; 0xe8 <TIMER_ISRfun+0x56>
		{
			Five_secondFLAG = 5;
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Five_secondFLAG>
			if(CARS_STOP == APP_enuTraficStates || CARS_MOVE == APP_enuTraficStates)
  c0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <APP_enuTraficStates>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	30 f4       	brcc	.+12     	; 0xd4 <TIMER_ISRfun+0x42>
			{
				Prevus_TraficState = APP_enuTraficStates;
  c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
				APP_enuTraficStates = CARS_STEADY; 
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <APP_enuTraficStates>
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <TIMER_ISRfun+0x56>
			}
			else if(Prevus_TraficState == CARS_MOVE)	APP_enuTraficStates = CARS_STOP;	
  d4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	19 f4       	brne	.+6      	; 0xe2 <TIMER_ISRfun+0x50>
  dc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <APP_enuTraficStates>
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <TIMER_ISRfun+0x56>
			else										APP_enuTraficStates = CARS_MOVE;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <APP_enuTraficStates>
		}
		
		ToggleFlag |=1;
  e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ToggleFlag>
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ToggleFlag>
		APP_u16TimeCounter = ONE_SECOND_COUNTS;
  f2:	8e e3       	ldi	r24, 0x3E	; 62
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <APP_u16TimeCounter+0x1>
  fa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <APP_u16TimeCounter>
		TCNT0 = TCNT_PRELOAD;
  fe:	87 ef       	ldi	r24, 0xF7	; 247
 100:	82 bf       	out	0x32, r24	; 50
 102:	08 95       	ret

00000104 <INT0_ISRFun>:
}

static u8 INT0State = ENABLED;
static void INT0_ISRFun(void*x)
{
	EXTI_enuDisableIntrrubt(EXTI_INT0);
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	0e 94 26 03 	call	0x64c	; 0x64c <EXTI_enuDisableIntrrubt>
	INT0State = DISABLED;
 10a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(CARS_STEADY == APP_enuTraficStates || CARS_MOVE == APP_enuTraficStates)
 10e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <APP_enuTraficStates>
 112:	9f ef       	ldi	r25, 0xFF	; 255
 114:	98 0f       	add	r25, r24
 116:	92 30       	cpi	r25, 0x02	; 2
 118:	a0 f4       	brcc	.+40     	; 0x142 <INT0_ISRFun+0x3e>
	{
		
		Prevus_TraficState = CARS_MOVE;
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__data_end>
		if( CARS_MOVE == APP_enuTraficStates)
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <INT0_ISRFun+0x36>
		{
			Five_secondFLAG = 5;
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Five_secondFLAG>
			APP_u16TimeCounter = ONE_SECOND_COUNTS;
 12a:	8e e3       	ldi	r24, 0x3E	; 62
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <APP_u16TimeCounter+0x1>
 132:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <APP_u16TimeCounter>
			TCNT0 = TCNT_PRELOAD;
 136:	87 ef       	ldi	r24, 0xF7	; 247
 138:	82 bf       	out	0x32, r24	; 50
		}
		APP_enuTraficStates = CARS_STEADY;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <APP_enuTraficStates>
 140:	08 95       	ret
	}	
	else
	{
		Five_secondFLAG = 5;
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Five_secondFLAG>
		APP_u16TimeCounter = ONE_SECOND_COUNTS;
 148:	8e e3       	ldi	r24, 0x3E	; 62
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <APP_u16TimeCounter+0x1>
 150:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <APP_u16TimeCounter>
		TCNT0 = TCNT_PRELOAD;
 154:	87 ef       	ldi	r24, 0xF7	; 247
 156:	82 bf       	out	0x32, r24	; 50
 158:	08 95       	ret

0000015a <APP_vidInit>:
	}
}

void APP_vidInit(void)
{
	DIO_enuSetPinDirection(PEDESTRAINS_BUTTON,DIO_INPUT);
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(PEDESTRAINS_BUTTON,DIO_HIGH);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
	
	DIO_enuSetPinDirection(CARS_GREEN,DIO_OUTPUT);	
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(CARS_YELLOW,DIO_OUTPUT);
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	8b e0       	ldi	r24, 0x0B	; 11
 17e:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(CARS_RED,DIO_OUTPUT);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	8b e0       	ldi	r24, 0x0B	; 11
 188:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_enuSetPinDirection>
	
	DIO_enuSetPinValue(CARS_GREEN,DIO_LOW);
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8b e0       	ldi	r24, 0x0B	; 11
 192:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(CARS_YELLOW,DIO_LOW);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(CARS_RED,DIO_LOW);
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	8b e0       	ldi	r24, 0x0B	; 11
 1a6:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
	
	DIO_enuSetPinDirection(PEDESTRAINS_GREEN,DIO_OUTPUT);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(PEDESTRAINS_YELLOW,DIO_OUTPUT);
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(PEDESTRAINS_RED,DIO_OUTPUT);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_enuSetPinDirection>
	
	DIO_enuSetPinValue(PEDESTRAINS_GREEN,DIO_LOW);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(PEDESTRAINS_YELLOW,DIO_LOW);
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	8c e0       	ldi	r24, 0x0C	; 12
 1d8:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(PEDESTRAINS_RED,DIO_LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
	
	APP_enuTraficStates = CARS_MOVE; 
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <APP_enuTraficStates>
	APP_u16TimeCounter = ONE_SECOND_COUNTS;
 1ec:	8e e3       	ldi	r24, 0x3E	; 62
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <APP_u16TimeCounter+0x1>
 1f4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <APP_u16TimeCounter>
	TIMER0_enuInit();
 1f8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMER0_enuInit>
	EXTI_enuInit();
 1fc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EXTI_enuInit>
	EXTI_enuCallBackFun(INT0_ISRFun,NULL,EXTI_INT0);
 200:	46 e0       	ldi	r20, 0x06	; 6
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	82 e8       	ldi	r24, 0x82	; 130
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 3b 03 	call	0x676	; 0x676 <EXTI_enuCallBackFun>
	TIMER0_enuCallBackFun(TIMER_ISRfun,NULL,TIMER0_OVFSInterr);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	89 e4       	ldi	r24, 0x49	; 73
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 e7 03 	call	0x7ce	; 0x7ce <TIMER0_enuCallBackFun>
	TCNT0 = TCNT_PRELOAD;
 21c:	87 ef       	ldi	r24, 0xF7	; 247
 21e:	82 bf       	out	0x32, r24	; 50
	GLOBALINTERRUPT_EN();
 220:	78 94       	sei
 222:	08 95       	ret

00000224 <APP_vidStart>:
}

void APP_vidStart(void)
{
	if(CARS_MOVE==APP_enuTraficStates)	
 224:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <APP_enuTraficStates>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	19 f5       	brne	.+70     	; 0x272 <APP_vidStart+0x4e>
	{
		DIO_enuSetPinValue(CARS_GREEN,DIO_HIGH);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	8b e0       	ldi	r24, 0x0B	; 11
 232:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(CARS_RED,DIO_LOW);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	8b e0       	ldi	r24, 0x0B	; 11
 23c:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(CARS_YELLOW,DIO_LOW);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	8b e0       	ldi	r24, 0x0B	; 11
 246:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		
		DIO_enuSetPinValue(PEDESTRAINS_GREEN,DIO_LOW);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	8c e0       	ldi	r24, 0x0C	; 12
 250:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(PEDESTRAINS_YELLOW,DIO_LOW);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(PEDESTRAINS_RED,DIO_HIGH);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		while(CARS_MOVE == APP_enuTraficStates);
 268:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <APP_enuTraficStates>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	e1 f3       	breq	.-8      	; 0x268 <APP_vidStart+0x44>
 270:	08 95       	ret
	}
	else if(CARS_STEADY == APP_enuTraficStates)
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	41 f5       	brne	.+80     	; 0x2c6 <APP_vidStart+0xa2>
	{
		DIO_enuSetPinValue(CARS_GREEN,DIO_LOW);
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	8b e0       	ldi	r24, 0x0B	; 11
 27c:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(CARS_RED,DIO_LOW);
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	8b e0       	ldi	r24, 0x0B	; 11
 286:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		//DIO_enuSetPinValue(CARS_YELLOW,DIO_LOW);
		
		DIO_enuSetPinValue(PEDESTRAINS_GREEN,DIO_LOW);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		//DIO_enuSetPinValue(PEDESTRAINS_YELLOW,DIO_LOW);
		DIO_enuSetPinValue(PEDESTRAINS_RED,DIO_LOW);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		while(CARS_STEADY == APP_enuTraficStates)
 29e:	0e c0       	rjmp	.+28     	; 0x2bc <APP_vidStart+0x98>
		{
			if(ToggleFlag)
 2a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ToggleFlag>
 2a4:	88 23       	and	r24, r24
 2a6:	51 f0       	breq	.+20     	; 0x2bc <APP_vidStart+0x98>
			{
				ToggleFlag &= 0;
 2a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ToggleFlag>
				DIO_enuTogglePin(PEDESTRAINS_YELLOW);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_enuTogglePin>
				DIO_enuTogglePin(CARS_YELLOW);	
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	8b e0       	ldi	r24, 0x0B	; 11
 2b8:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_enuTogglePin>
		//DIO_enuSetPinValue(CARS_YELLOW,DIO_LOW);
		
		DIO_enuSetPinValue(PEDESTRAINS_GREEN,DIO_LOW);
		//DIO_enuSetPinValue(PEDESTRAINS_YELLOW,DIO_LOW);
		DIO_enuSetPinValue(PEDESTRAINS_RED,DIO_LOW);
		while(CARS_STEADY == APP_enuTraficStates)
 2bc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <APP_enuTraficStates>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	71 f3       	breq	.-36     	; 0x2a0 <APP_vidStart+0x7c>
 2c4:	08 95       	ret
			
		}
	}
	else
	{
		DIO_enuSetPinValue(CARS_GREEN,DIO_LOW);
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	8b e0       	ldi	r24, 0x0B	; 11
 2cc:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(CARS_RED,DIO_HIGH);
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	8b e0       	ldi	r24, 0x0B	; 11
 2d6:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(CARS_YELLOW,DIO_LOW);
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		
		DIO_enuSetPinValue(PEDESTRAINS_GREEN,DIO_HIGH);
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	8c e0       	ldi	r24, 0x0C	; 12
 2ea:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(PEDESTRAINS_YELLOW,DIO_LOW);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	8c e0       	ldi	r24, 0x0C	; 12
 2f4:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(PEDESTRAINS_RED,DIO_LOW);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	8c e0       	ldi	r24, 0x0C	; 12
 2fe:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_enuSetPinValue>
		while(CARS_STOP == APP_enuTraficStates)
 302:	0e c0       	rjmp	.+28     	; 0x320 <APP_vidStart+0xfc>
		{
			if(Five_secondFLAG<3 && INT0State == DISABLED)
 304:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Five_secondFLAG>
 308:	83 30       	cpi	r24, 0x03	; 3
 30a:	50 f4       	brcc	.+20     	; 0x320 <APP_vidStart+0xfc>
 30c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 310:	81 11       	cpse	r24, r1
 312:	06 c0       	rjmp	.+12     	; 0x320 <APP_vidStart+0xfc>
			{
				EXTI_enuEnableInterrupt(EXTI_INT0);
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	0e 94 12 03 	call	0x624	; 0x624 <EXTI_enuEnableInterrupt>
				INT0State = ENABLED;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		DIO_enuSetPinValue(CARS_YELLOW,DIO_LOW);
		
		DIO_enuSetPinValue(PEDESTRAINS_GREEN,DIO_HIGH);
		DIO_enuSetPinValue(PEDESTRAINS_YELLOW,DIO_LOW);
		DIO_enuSetPinValue(PEDESTRAINS_RED,DIO_LOW);
		while(CARS_STOP == APP_enuTraficStates)
 320:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <APP_enuTraficStates>
 324:	88 23       	and	r24, r24
 326:	71 f3       	breq	.-36     	; 0x304 <APP_vidStart+0xe0>
 328:	08 95       	ret

0000032a <main>:
//#include <avr/io.h>
#include "APP/APP.h"

int main(void)
{
	APP_vidInit();
 32a:	0e 94 ad 00 	call	0x15a	; 0x15a <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
		APP_vidStart();
 32e:	0e 94 12 01 	call	0x224	; 0x224 <APP_vidStart>
 332:	fd cf       	rjmp	.-6      	; 0x32e <main+0x4>

00000334 <DIO_enuSetPinDirection>:
			}
		}
		else Local_enuErrorState = ES_NULL_POINTER;
	}
	return Local_enuErrorState;
}
 334:	95 ef       	ldi	r25, 0xF5	; 245
 336:	98 0f       	add	r25, r24
 338:	94 30       	cpi	r25, 0x04	; 4
 33a:	08 f0       	brcs	.+2      	; 0x33e <DIO_enuSetPinDirection+0xa>
 33c:	81 c0       	rjmp	.+258    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 33e:	68 30       	cpi	r22, 0x08	; 8
 340:	08 f0       	brcs	.+2      	; 0x344 <DIO_enuSetPinDirection+0x10>
 342:	80 c0       	rjmp	.+256    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	d9 f5       	brne	.+118    	; 0x3be <DIO_enuSetPinDirection+0x8a>
 348:	8c 30       	cpi	r24, 0x0C	; 12
 34a:	a9 f0       	breq	.+42     	; 0x376 <DIO_enuSetPinDirection+0x42>
 34c:	18 f4       	brcc	.+6      	; 0x354 <DIO_enuSetPinDirection+0x20>
 34e:	8b 30       	cpi	r24, 0x0B	; 11
 350:	31 f0       	breq	.+12     	; 0x35e <DIO_enuSetPinDirection+0x2a>
 352:	7a c0       	rjmp	.+244    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 354:	8d 30       	cpi	r24, 0x0D	; 13
 356:	d9 f0       	breq	.+54     	; 0x38e <DIO_enuSetPinDirection+0x5a>
 358:	8e 30       	cpi	r24, 0x0E	; 14
 35a:	29 f1       	breq	.+74     	; 0x3a6 <DIO_enuSetPinDirection+0x72>
 35c:	75 c0       	rjmp	.+234    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 35e:	2a b3       	in	r18, 0x1a	; 26
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_enuSetPinDirection+0x36>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_enuSetPinDirection+0x32>
 36e:	82 2b       	or	r24, r18
 370:	8a bb       	out	0x1a, r24	; 26
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	08 95       	ret
 376:	27 b3       	in	r18, 0x17	; 23
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_enuSetPinDirection+0x4e>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_enuSetPinDirection+0x4a>
 386:	82 2b       	or	r24, r18
 388:	87 bb       	out	0x17, r24	; 23
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret
 38e:	24 b3       	in	r18, 0x14	; 20
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_enuSetPinDirection+0x66>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_enuSetPinDirection+0x62>
 39e:	82 2b       	or	r24, r18
 3a0:	84 bb       	out	0x14, r24	; 20
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
 3a6:	21 b3       	in	r18, 0x11	; 17
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_enuSetPinDirection+0x7e>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_enuSetPinDirection+0x7a>
 3b6:	82 2b       	or	r24, r18
 3b8:	81 bb       	out	0x11, r24	; 17
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	08 95       	ret
 3be:	41 11       	cpse	r20, r1
 3c0:	45 c0       	rjmp	.+138    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3c2:	8c 30       	cpi	r24, 0x0C	; 12
 3c4:	b1 f0       	breq	.+44     	; 0x3f2 <DIO_enuSetPinDirection+0xbe>
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <DIO_enuSetPinDirection+0x9a>
 3c8:	8b 30       	cpi	r24, 0x0B	; 11
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <DIO_enuSetPinDirection+0xa4>
 3cc:	41 c0       	rjmp	.+130    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3ce:	8d 30       	cpi	r24, 0x0D	; 13
 3d0:	e9 f0       	breq	.+58     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3d2:	8e 30       	cpi	r24, 0x0E	; 14
 3d4:	41 f1       	breq	.+80     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3d6:	3c c0       	rjmp	.+120    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3d8:	2a b3       	in	r18, 0x1a	; 26
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_enuSetPinDirection+0xb0>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_enuSetPinDirection+0xac>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	8a bb       	out	0x1a, r24	; 26
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret
 3f2:	27 b3       	in	r18, 0x17	; 23
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_enuSetPinDirection+0xca>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_enuSetPinDirection+0xc6>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	87 bb       	out	0x17, r24	; 23
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
 40c:	24 b3       	in	r18, 0x14	; 20
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	84 bb       	out	0x14, r24	; 20
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
 426:	21 b3       	in	r18, 0x11	; 17
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	81 bb       	out	0x11, r24	; 17
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	08 95       	ret
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	08 95       	ret
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret

00000454 <DIO_enuSetPinValue>:
 454:	95 ef       	ldi	r25, 0xF5	; 245
 456:	98 0f       	add	r25, r24
 458:	94 30       	cpi	r25, 0x04	; 4
 45a:	08 f0       	brcs	.+2      	; 0x45e <DIO_enuSetPinValue+0xa>
 45c:	81 c0       	rjmp	.+258    	; 0x560 <DIO_enuSetPinValue+0x10c>
 45e:	68 30       	cpi	r22, 0x08	; 8
 460:	08 f0       	brcs	.+2      	; 0x464 <DIO_enuSetPinValue+0x10>
 462:	80 c0       	rjmp	.+256    	; 0x564 <DIO_enuSetPinValue+0x110>
 464:	41 30       	cpi	r20, 0x01	; 1
 466:	d9 f5       	brne	.+118    	; 0x4de <DIO_enuSetPinValue+0x8a>
 468:	8c 30       	cpi	r24, 0x0C	; 12
 46a:	a9 f0       	breq	.+42     	; 0x496 <DIO_enuSetPinValue+0x42>
 46c:	18 f4       	brcc	.+6      	; 0x474 <DIO_enuSetPinValue+0x20>
 46e:	8b 30       	cpi	r24, 0x0B	; 11
 470:	31 f0       	breq	.+12     	; 0x47e <DIO_enuSetPinValue+0x2a>
 472:	7a c0       	rjmp	.+244    	; 0x568 <DIO_enuSetPinValue+0x114>
 474:	8d 30       	cpi	r24, 0x0D	; 13
 476:	d9 f0       	breq	.+54     	; 0x4ae <DIO_enuSetPinValue+0x5a>
 478:	8e 30       	cpi	r24, 0x0E	; 14
 47a:	29 f1       	breq	.+74     	; 0x4c6 <DIO_enuSetPinValue+0x72>
 47c:	75 c0       	rjmp	.+234    	; 0x568 <DIO_enuSetPinValue+0x114>
 47e:	2b b3       	in	r18, 0x1b	; 27
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_enuSetPinValue+0x36>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_enuSetPinValue+0x32>
 48e:	82 2b       	or	r24, r18
 490:	8b bb       	out	0x1b, r24	; 27
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret
 496:	28 b3       	in	r18, 0x18	; 24
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_enuSetPinValue+0x4e>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_enuSetPinValue+0x4a>
 4a6:	82 2b       	or	r24, r18
 4a8:	88 bb       	out	0x18, r24	; 24
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	08 95       	ret
 4ae:	25 b3       	in	r18, 0x15	; 21
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_enuSetPinValue+0x66>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_enuSetPinValue+0x62>
 4be:	82 2b       	or	r24, r18
 4c0:	85 bb       	out	0x15, r24	; 21
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	08 95       	ret
 4c6:	22 b3       	in	r18, 0x12	; 18
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_enuSetPinValue+0x7e>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_enuSetPinValue+0x7a>
 4d6:	82 2b       	or	r24, r18
 4d8:	82 bb       	out	0x12, r24	; 18
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	41 11       	cpse	r20, r1
 4e0:	45 c0       	rjmp	.+138    	; 0x56c <DIO_enuSetPinValue+0x118>
 4e2:	8c 30       	cpi	r24, 0x0C	; 12
 4e4:	b1 f0       	breq	.+44     	; 0x512 <DIO_enuSetPinValue+0xbe>
 4e6:	18 f4       	brcc	.+6      	; 0x4ee <DIO_enuSetPinValue+0x9a>
 4e8:	8b 30       	cpi	r24, 0x0B	; 11
 4ea:	31 f0       	breq	.+12     	; 0x4f8 <DIO_enuSetPinValue+0xa4>
 4ec:	41 c0       	rjmp	.+130    	; 0x570 <DIO_enuSetPinValue+0x11c>
 4ee:	8d 30       	cpi	r24, 0x0D	; 13
 4f0:	e9 f0       	breq	.+58     	; 0x52c <DIO_enuSetPinValue+0xd8>
 4f2:	8e 30       	cpi	r24, 0x0E	; 14
 4f4:	41 f1       	breq	.+80     	; 0x546 <DIO_enuSetPinValue+0xf2>
 4f6:	3c c0       	rjmp	.+120    	; 0x570 <DIO_enuSetPinValue+0x11c>
 4f8:	2b b3       	in	r18, 0x1b	; 27
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_enuSetPinValue+0xb0>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_enuSetPinValue+0xac>
 508:	80 95       	com	r24
 50a:	82 23       	and	r24, r18
 50c:	8b bb       	out	0x1b, r24	; 27
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret
 512:	28 b3       	in	r18, 0x18	; 24
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_enuSetPinValue+0xca>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_enuSetPinValue+0xc6>
 522:	80 95       	com	r24
 524:	82 23       	and	r24, r18
 526:	88 bb       	out	0x18, r24	; 24
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
 52c:	25 b3       	in	r18, 0x15	; 21
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_enuSetPinValue+0xe4>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_enuSetPinValue+0xe0>
 53c:	80 95       	com	r24
 53e:	82 23       	and	r24, r18
 540:	85 bb       	out	0x15, r24	; 21
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	08 95       	ret
 546:	22 b3       	in	r18, 0x12	; 18
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_enuSetPinValue+0xfe>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_enuSetPinValue+0xfa>
 556:	80 95       	com	r24
 558:	82 23       	and	r24, r18
 55a:	82 bb       	out	0x12, r24	; 18
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	08 95       	ret
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	08 95       	ret
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	08 95       	ret
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	08 95       	ret

00000574 <DIO_enuTogglePin>:

ES_t DIO_enuTogglePin(u8 Copy_u8Group,u8 Copy_u8Pin)
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_u8Group>=DIO_GroupA && Copy_u8Group <= DIO_GroupD && Copy_u8Pin>=DIO_PIN_0
 574:	95 ef       	ldi	r25, 0xF5	; 245
 576:	98 0f       	add	r25, r24
 578:	94 30       	cpi	r25, 0x04	; 4
 57a:	c0 f5       	brcc	.+112    	; 0x5ec <DIO_enuTogglePin+0x78>
	&& Copy_u8Pin <= DIO_PIN_7)
 57c:	68 30       	cpi	r22, 0x08	; 8
 57e:	b0 f5       	brcc	.+108    	; 0x5ec <DIO_enuTogglePin+0x78>
	{
		switch(Copy_u8Group)
 580:	8c 30       	cpi	r24, 0x0C	; 12
 582:	a1 f0       	breq	.+40     	; 0x5ac <DIO_enuTogglePin+0x38>
 584:	18 f4       	brcc	.+6      	; 0x58c <DIO_enuTogglePin+0x18>
 586:	8b 30       	cpi	r24, 0x0B	; 11
 588:	31 f0       	breq	.+12     	; 0x596 <DIO_enuTogglePin+0x22>
 58a:	30 c0       	rjmp	.+96     	; 0x5ec <DIO_enuTogglePin+0x78>
 58c:	8d 30       	cpi	r24, 0x0D	; 13
 58e:	c9 f0       	breq	.+50     	; 0x5c2 <DIO_enuTogglePin+0x4e>
 590:	8e 30       	cpi	r24, 0x0E	; 14
 592:	11 f1       	breq	.+68     	; 0x5d8 <DIO_enuTogglePin+0x64>
 594:	2b c0       	rjmp	.+86     	; 0x5ec <DIO_enuTogglePin+0x78>
		{
			case DIO_GroupA :
			PORTA ^= (1<<Copy_u8Pin);
 596:	2b b3       	in	r18, 0x1b	; 27
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_enuTogglePin+0x2e>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_enuTogglePin+0x2a>
 5a6:	82 27       	eor	r24, r18
 5a8:	8b bb       	out	0x1b, r24	; 27
			break;
 5aa:	20 c0       	rjmp	.+64     	; 0x5ec <DIO_enuTogglePin+0x78>
			case DIO_GroupB :
			PORTB ^= (1<<Copy_u8Pin);
 5ac:	28 b3       	in	r18, 0x18	; 24
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_enuTogglePin+0x44>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_enuTogglePin+0x40>
 5bc:	82 27       	eor	r24, r18
 5be:	88 bb       	out	0x18, r24	; 24
			break;
 5c0:	15 c0       	rjmp	.+42     	; 0x5ec <DIO_enuTogglePin+0x78>
			case DIO_GroupC :
			PORTC ^= (1<<Copy_u8Pin);
 5c2:	25 b3       	in	r18, 0x15	; 21
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_enuTogglePin+0x5a>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_enuTogglePin+0x56>
 5d2:	82 27       	eor	r24, r18
 5d4:	85 bb       	out	0x15, r24	; 21
			break;
 5d6:	0a c0       	rjmp	.+20     	; 0x5ec <DIO_enuTogglePin+0x78>
			case DIO_GroupD :
			PORTD ^= (1<<Copy_u8Pin);
 5d8:	22 b3       	in	r18, 0x12	; 18
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_enuTogglePin+0x70>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_enuTogglePin+0x6c>
 5e8:	82 27       	eor	r24, r18
 5ea:	82 bb       	out	0x12, r24	; 18
			break;
		}
	}
	return Local_enuErrorState;
}
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	08 95       	ret

000005f0 <EXTI_enuInit>:
			}
			break;
	}
	
	return Local_enuErrorState;
}
 5f0:	8b b7       	in	r24, 0x3b	; 59
 5f2:	80 64       	ori	r24, 0x40	; 64
 5f4:	8b bf       	out	0x3b, r24	; 59
 5f6:	8b b7       	in	r24, 0x3b	; 59
 5f8:	8f 77       	andi	r24, 0x7F	; 127
 5fa:	8b bf       	out	0x3b, r24	; 59
 5fc:	8b b7       	in	r24, 0x3b	; 59
 5fe:	8f 7d       	andi	r24, 0xDF	; 223
 600:	8b bf       	out	0x3b, r24	; 59
 602:	85 b7       	in	r24, 0x35	; 53
 604:	8c 7f       	andi	r24, 0xFC	; 252
 606:	85 bf       	out	0x35, r24	; 53
 608:	85 b7       	in	r24, 0x35	; 53
 60a:	83 60       	ori	r24, 0x03	; 3
 60c:	85 bf       	out	0x35, r24	; 53
 60e:	85 b7       	in	r24, 0x35	; 53
 610:	83 7f       	andi	r24, 0xF3	; 243
 612:	85 bf       	out	0x35, r24	; 53
 614:	85 b7       	in	r24, 0x35	; 53
 616:	84 60       	ori	r24, 0x04	; 4
 618:	85 bf       	out	0x35, r24	; 53
 61a:	84 b7       	in	r24, 0x34	; 52
 61c:	80 64       	ori	r24, 0x40	; 64
 61e:	84 bf       	out	0x34, r24	; 52
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	08 95       	ret

00000624 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt(u8 Copy_u8IntPin)
{
	ES_t Local_enuErrorState=ES_NOK;
	if(Copy_u8IntPin<=INT1 && Copy_u8IntPin>= INT2)
 624:	9b ef       	ldi	r25, 0xFB	; 251
 626:	98 0f       	add	r25, r24
 628:	93 30       	cpi	r25, 0x03	; 3
 62a:	70 f4       	brcc	.+28     	; 0x648 <EXTI_enuEnableInterrupt+0x24>
	{
		GICR |=(1<<Copy_u8IntPin);		
 62c:	4b b7       	in	r20, 0x3b	; 59
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	b9 01       	movw	r22, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <EXTI_enuEnableInterrupt+0x16>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	8a 95       	dec	r24
 63c:	e2 f7       	brpl	.-8      	; 0x636 <EXTI_enuEnableInterrupt+0x12>
 63e:	cb 01       	movw	r24, r22
 640:	84 2b       	or	r24, r20
 642:	8b bf       	out	0x3b, r24	; 59
		Local_enuErrorState = ES_OK;
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	08 95       	ret
	return Local_enuErrorState;
}

ES_t EXTI_enuEnableInterrupt(u8 Copy_u8IntPin)
{
	ES_t Local_enuErrorState=ES_NOK;
 648:	81 e0       	ldi	r24, 0x01	; 1
	{
		GICR |=(1<<Copy_u8IntPin);		
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
 64a:	08 95       	ret

0000064c <EXTI_enuDisableIntrrubt>:

ES_t EXTI_enuDisableIntrrubt(u8 Copy_u8IntPin)
{
	ES_t Local_enuErrorState=ES_NOK;
	if(Copy_u8IntPin<=INT1 && Copy_u8IntPin>= INT2)
 64c:	9b ef       	ldi	r25, 0xFB	; 251
 64e:	98 0f       	add	r25, r24
 650:	93 30       	cpi	r25, 0x03	; 3
 652:	78 f4       	brcc	.+30     	; 0x672 <EXTI_enuDisableIntrrubt+0x26>
	{
		GICR &=~(1<<Copy_u8IntPin);
 654:	4b b7       	in	r20, 0x3b	; 59
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	b9 01       	movw	r22, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <EXTI_enuDisableIntrrubt+0x16>
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <EXTI_enuDisableIntrrubt+0x12>
 666:	cb 01       	movw	r24, r22
 668:	80 95       	com	r24
 66a:	84 23       	and	r24, r20
 66c:	8b bf       	out	0x3b, r24	; 59
		Local_enuErrorState = ES_OK;
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret
	return Local_enuErrorState;
}

ES_t EXTI_enuDisableIntrrubt(u8 Copy_u8IntPin)
{
	ES_t Local_enuErrorState=ES_NOK;
 672:	81 e0       	ldi	r24, 0x01	; 1
	{
		GICR &=~(1<<Copy_u8IntPin);
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
 674:	08 95       	ret

00000676 <EXTI_enuCallBackFun>:

ES_t EXTI_enuCallBackFun(void (*Copy_pfunAPPFun)(void*),void * Copy_pvidFunparameter,u8 Copy_u8IntPin)
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pfunAPPFun)
 676:	00 97       	sbiw	r24, 0x00	; 0
 678:	a9 f0       	breq	.+42     	; 0x6a4 <EXTI_enuCallBackFun+0x2e>
		if(Copy_u8IntPin<=INT1 && Copy_u8IntPin>=INT2)
 67a:	2b ef       	ldi	r18, 0xFB	; 251
 67c:	24 0f       	add	r18, r20
 67e:	23 30       	cpi	r18, 0x03	; 3
 680:	98 f4       	brcc	.+38     	; 0x6a8 <EXTI_enuCallBackFun+0x32>
		{
			EXTI_ApfunISRfun[Copy_u8IntPin-INT2] = Copy_pfunAPPFun;
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	45 50       	subi	r20, 0x05	; 5
 686:	51 09       	sbc	r21, r1
 688:	44 0f       	add	r20, r20
 68a:	55 1f       	adc	r21, r21
 68c:	fa 01       	movw	r30, r20
 68e:	e2 59       	subi	r30, 0x92	; 146
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	91 83       	std	Z+1, r25	; 0x01
 694:	80 83       	st	Z, r24
			EXTI_ApvidISRParameter[Copy_u8IntPin-INT2] = Copy_pvidFunparameter;
 696:	fa 01       	movw	r30, r20
 698:	e8 59       	subi	r30, 0x98	; 152
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	71 83       	std	Z+1, r23	; 0x01
 69e:	60 83       	st	Z, r22
			Local_enuErrorState = ES_OK;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	08 95       	ret
	return Local_enuErrorState;
}

ES_t EXTI_enuCallBackFun(void (*Copy_pfunAPPFun)(void*),void * Copy_pvidFunparameter,u8 Copy_u8IntPin)
{
	ES_t Local_enuErrorState = ES_NOK;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	08 95       	ret
 6a8:	81 e0       	ldi	r24, 0x01	; 1
			EXTI_ApvidISRParameter[Copy_u8IntPin-INT2] = Copy_pvidFunparameter;
			Local_enuErrorState = ES_OK;
		}
	
	return Local_enuErrorState;
}
 6aa:	08 95       	ret

000006ac <__vector_1>:

void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	if(EXTI_ApfunISRfun[INT0-INT2])
 6ce:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <EXTI_ApfunISRfun+0x2>
 6d2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <EXTI_ApfunISRfun+0x3>
 6d6:	30 97       	sbiw	r30, 0x00	; 0
 6d8:	29 f0       	breq	.+10     	; 0x6e4 <__vector_1+0x38>
	{
		EXTI_ApfunISRfun[INT0-INT2](EXTI_ApvidISRParameter[INT0-INT2]);
 6da:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <EXTI_ApvidISRParameter+0x2>
 6de:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <EXTI_ApvidISRParameter+0x3>
 6e2:	09 95       	icall
	}
}
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__vector_2>:

void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	2f 93       	push	r18
 712:	3f 93       	push	r19
 714:	4f 93       	push	r20
 716:	5f 93       	push	r21
 718:	6f 93       	push	r22
 71a:	7f 93       	push	r23
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
	if(EXTI_ApfunISRfun[INT1-INT2])
 728:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <EXTI_ApfunISRfun+0x4>
 72c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <EXTI_ApfunISRfun+0x5>
 730:	30 97       	sbiw	r30, 0x00	; 0
 732:	29 f0       	breq	.+10     	; 0x73e <__vector_2+0x38>
	{
		EXTI_ApfunISRfun[INT1-INT2](EXTI_ApvidISRParameter[INT1-INT2]);
 734:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <EXTI_ApvidISRParameter+0x4>
 738:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <EXTI_ApvidISRParameter+0x5>
 73c:	09 95       	icall
	}
}
 73e:	ff 91       	pop	r31
 740:	ef 91       	pop	r30
 742:	bf 91       	pop	r27
 744:	af 91       	pop	r26
 746:	9f 91       	pop	r25
 748:	8f 91       	pop	r24
 74a:	7f 91       	pop	r23
 74c:	6f 91       	pop	r22
 74e:	5f 91       	pop	r21
 750:	4f 91       	pop	r20
 752:	3f 91       	pop	r19
 754:	2f 91       	pop	r18
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <__vector_3>:

void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	0f 92       	push	r0
 768:	11 24       	eor	r1, r1
 76a:	2f 93       	push	r18
 76c:	3f 93       	push	r19
 76e:	4f 93       	push	r20
 770:	5f 93       	push	r21
 772:	6f 93       	push	r22
 774:	7f 93       	push	r23
 776:	8f 93       	push	r24
 778:	9f 93       	push	r25
 77a:	af 93       	push	r26
 77c:	bf 93       	push	r27
 77e:	ef 93       	push	r30
 780:	ff 93       	push	r31
	if(EXTI_ApfunISRfun[INT2-INT2])
 782:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <EXTI_ApfunISRfun>
 786:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <EXTI_ApfunISRfun+0x1>
 78a:	30 97       	sbiw	r30, 0x00	; 0
 78c:	29 f0       	breq	.+10     	; 0x798 <__vector_3+0x38>
	{
		EXTI_ApfunISRfun[INT2-INT2](EXTI_ApvidISRParameter[INT2-INT2]);
 78e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <EXTI_ApvidISRParameter>
 792:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <EXTI_ApvidISRParameter+0x1>
 796:	09 95       	icall
	}
	
 798:	ff 91       	pop	r31
 79a:	ef 91       	pop	r30
 79c:	bf 91       	pop	r27
 79e:	af 91       	pop	r26
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	7f 91       	pop	r23
 7a6:	6f 91       	pop	r22
 7a8:	5f 91       	pop	r21
 7aa:	4f 91       	pop	r20
 7ac:	3f 91       	pop	r19
 7ae:	2f 91       	pop	r18
 7b0:	0f 90       	pop	r0
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	0f 90       	pop	r0
 7b6:	1f 90       	pop	r1
 7b8:	18 95       	reti

000007ba <TIMER0_enuInit>:
	{
		Local_enuErrorState=ES_OK;
		TCCR0 &= ~(Copy_u8Interrupt);
	}
	return Local_enuErrorState ;
}
 7ba:	85 e0       	ldi	r24, 0x05	; 5
 7bc:	83 bf       	out	0x33, r24	; 51
 7be:	89 b7       	in	r24, 0x39	; 57
 7c0:	8c 7f       	andi	r24, 0xFC	; 252
 7c2:	89 bf       	out	0x39, r24	; 57
 7c4:	89 b7       	in	r24, 0x39	; 57
 7c6:	81 60       	ori	r24, 0x01	; 1
 7c8:	89 bf       	out	0x39, r24	; 57
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret

000007ce <TIMER0_enuCallBackFun>:

ES_t TIMER0_enuCallBackFun(void (*Copy_pfunAPPFun)(void*) ,void * Copy_pvidParameter,u8 Copy_InterruptMood)
{
	ES_t Local_enuErrorState=ES_NOK;
	if(Copy_pfunAPPFun)
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	c1 f0       	breq	.+48     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		if((TIMER0_OVFSInterrEN)==Copy_InterruptMood)
 7d2:	41 30       	cpi	r20, 0x01	; 1
 7d4:	51 f4       	brne	.+20     	; 0x7ea <TIMER0_enuCallBackFun+0x1c>
		{
			TIMER0_ApfunISRfun[0] = Copy_pfunAPPFun;
 7d6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <TIMER0_ApfunISRfun+0x1>
 7da:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <TIMER0_ApfunISRfun>
			TIMER0_ApvidISRParameter[0]= Copy_pvidParameter;
 7de:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <TIMER0_ApvidISRParameter+0x1>
 7e2:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <TIMER0_ApvidISRParameter>
			Local_enuErrorState = ES_OK;
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	08 95       	ret
		}
		else if((TIMER0_CompMatchInterrEN)==Copy_InterruptMood)
 7ea:	42 30       	cpi	r20, 0x02	; 2
 7ec:	61 f4       	brne	.+24     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		{
			TIMER0_ApfunISRfun[1] = Copy_pfunAPPFun;
 7ee:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <TIMER0_ApfunISRfun+0x3>
 7f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <TIMER0_ApfunISRfun+0x2>
			TIMER0_ApvidISRParameter[1]= Copy_pvidParameter;
 7f6:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <TIMER0_ApvidISRParameter+0x3>
 7fa:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <TIMER0_ApvidISRParameter+0x2>
			Local_enuErrorState = ES_OK;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	08 95       	ret
		}
	}
	else	Local_enuErrorState = ES_NULL_POINTER;
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	08 95       	ret
	return Local_enuErrorState ;
}

ES_t TIMER0_enuCallBackFun(void (*Copy_pfunAPPFun)(void*) ,void * Copy_pvidParameter,u8 Copy_InterruptMood)
{
	ES_t Local_enuErrorState=ES_NOK;
 806:	81 e0       	ldi	r24, 0x01	; 1
			Local_enuErrorState = ES_OK;
		}
	}
	else	Local_enuErrorState = ES_NULL_POINTER;
	return Local_enuErrorState ;
}
 808:	08 95       	ret

0000080a <__vector_11>:
void __vector_11(void)__attribute__((signal));	//OVF
void __vector_11(void)	//OVF		0
{
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	
	if(TIMER0_ApfunISRfun[0] )	
 82c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <TIMER0_ApfunISRfun>
 830:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <TIMER0_ApfunISRfun+0x1>
 834:	30 97       	sbiw	r30, 0x00	; 0
 836:	29 f0       	breq	.+10     	; 0x842 <__vector_11+0x38>
		TIMER0_ApfunISRfun[0](TIMER0_ApvidISRParameter[0]);
 838:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <TIMER0_ApvidISRParameter>
 83c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <TIMER0_ApvidISRParameter+0x1>
 840:	09 95       	icall
	
}
 842:	ff 91       	pop	r31
 844:	ef 91       	pop	r30
 846:	bf 91       	pop	r27
 848:	af 91       	pop	r26
 84a:	9f 91       	pop	r25
 84c:	8f 91       	pop	r24
 84e:	7f 91       	pop	r23
 850:	6f 91       	pop	r22
 852:	5f 91       	pop	r21
 854:	4f 91       	pop	r20
 856:	3f 91       	pop	r19
 858:	2f 91       	pop	r18
 85a:	0f 90       	pop	r0
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	0f 90       	pop	r0
 860:	1f 90       	pop	r1
 862:	18 95       	reti

00000864 <__vector_10>:
void __vector_10(void)__attribute__((signal));  //CM
void __vector_10(void)  //CM		1
{
 864:	1f 92       	push	r1
 866:	0f 92       	push	r0
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	0f 92       	push	r0
 86c:	11 24       	eor	r1, r1
 86e:	2f 93       	push	r18
 870:	3f 93       	push	r19
 872:	4f 93       	push	r20
 874:	5f 93       	push	r21
 876:	6f 93       	push	r22
 878:	7f 93       	push	r23
 87a:	8f 93       	push	r24
 87c:	9f 93       	push	r25
 87e:	af 93       	push	r26
 880:	bf 93       	push	r27
 882:	ef 93       	push	r30
 884:	ff 93       	push	r31
	if(TIMER0_ApfunISRfun[1] )
 886:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TIMER0_ApfunISRfun+0x2>
 88a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TIMER0_ApfunISRfun+0x3>
 88e:	30 97       	sbiw	r30, 0x00	; 0
 890:	29 f0       	breq	.+10     	; 0x89c <__vector_10+0x38>
	TIMER0_ApfunISRfun[1](TIMER0_ApvidISRParameter[1]);	
 892:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TIMER0_ApvidISRParameter+0x2>
 896:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <TIMER0_ApvidISRParameter+0x3>
 89a:	09 95       	icall
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
